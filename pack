#!/usr/bin/env fish
set DIR (cd (dirname (status -f)); and pwd)
if test -f "$DIR/.env.sh"
    cat $DIR/.env.sh | sed 's/export/set -xg/g' | sed 's/=/ /g' | source
end

function notarize
    echo "Sending $argv[1] for notarization"
    set XCRUN_OUTPUT (xcrun altool --notarize-app -f "$argv[1]" --primary-bundle-id site.lunarapp.Lunar -u 'alin.p32@gmail.com' -p $APP_STORE_PASSWORD)
    echo "$XCRUN_OUTPUT"
    set REQUEST_UUID (echo "$XCRUN_OUTPUT" | rg -o -r '$1' 'RequestUUID = (\S+)')

    echo "Checking notarization for $REQUEST_UUID"
    while not xcrun altool --notarization-info "$REQUEST_UUID" -u 'alin.p32@gmail.com' -p $APP_STORE_PASSWORD | grep -q 'Package Approved'
        echo "Waiting for notarization approval"
        sleep 3
    end
    while xcrun altool --notarization-info "$REQUEST_UUID" -u 'alin.p32@gmail.com' -p $APP_STORE_PASSWORD | grep -q 'Status: in progress'
        echo "Waiting for notarization completion"
        sleep 3
    end
    xcrun stapler staple "$argv[2]"

    for i in (seq 10)
        echo "Checking if $argv[2] is notarized"
        if spctl --assess -vvvvv --no-cache --ignore-cache --type "$argv[3]" "$argv[2]" 2>&1 | grep -q 'source=Notarized Developer ID'
            echo "Notarization success for $argv[2]"
            return
        end
        sleep 10
    end

    if spctl --assess -vvvvv --no-cache --ignore-cache "$argv[2]" 2>&1 | grep -q 'source=Unnotarized Developer ID'
        echo "Error notarizing $argv[2]"
        xcrun altool --notarization-info "$REQUEST_UUID" -u 'alin.p32@gmail.com' -p $APP_STORE_PASSWORD
        exit 1
    end
end

set -l WORK_DIR "$PROJECT_DIR"
set -l BUILD_DIR "$CODESIGNING_FOLDER_PATH"
set -l TMP_DIR /tmp/Lunar
set -l TMP_DMG_DIR "$TMP_DIR/DMG"
set -l RELEASE_DIR "$WORK_DIR/Releases"
set -l PRIV_KEY "$WORK_DIR/Lunar/Resources/dsa_priv.pem"
set -l ED_PRIV_KEY "$WORK_DIR/Lunar/Resources/eddsa_priv"
set -l APPCAST "$RELEASE_DIR/appcast.xml"

set -l APP_TMP "$TMP_DIR/Lunar.app"
set -l APP_ZIP_TMP "$TMP_DIR/Lunar.zip"

mkdir -p $TMP_DIR
rm -rf $TMP_DIR
mkdir -p $TMP_DMG_DIR
cp -R "$BUILD_DIR" "$APP_TMP"

codesign -fs "$EXPANDED_CODE_SIGN_IDENTITY_NAME" -o runtime --preserve-metadata=identifier,flags "$APP_TMP/Contents/Frameworks/"*.framework
codesign -fs "$EXPANDED_CODE_SIGN_IDENTITY_NAME" -o runtime --preserve-metadata=identifier,flags "$APP_TMP/Contents/Library/LoginItems/LunarService.app"
codesign -fs "$EXPANDED_CODE_SIGN_IDENTITY_NAME" -o runtime --preserve-metadata=identifier,flags --deep "$APP_TMP"
if not codesign -vvv --deep --strict "$APP_TMP"
    echo 'Bad signature'
    exit 1
end

if not spctl --assess -vvvvv --no-cache --ignore-cache "$APP_TMP" 2>&1 | grep -q 'source=Unnotarized Developer ID'
    echo 'Bad signature'
    exit 1
end

ditto -c -k --keepParent "$APP_TMP" "$APP_ZIP_TMP"

# notarize "$APP_ZIP_TMP" "$APP_TMP" "execute"

set -l APP_VERSION (/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$APP_TMP/Contents/Info.plist")
set -l APP_LATEST_DMG "$RELEASE_DIR/../Lunar.dmg"
set -l APP_DMG "$RELEASE_DIR/Lunar-$APP_VERSION.dmg"
set -l APP_TMP_DMG "$TMP_DMG_DIR/Lunar $APP_VERSION.dmg"

if test -f "$APP_DMG"
    echo (set_color red)"Deleting $APP_DMG"(set_color normal)
    rm "$APP_DMG"
end
if test -f "$APP_LATEST_DMG"
    echo \n(set_color red)"Deleting $APP_LATEST_DMG"(set_color normal)
    rm "$APP_LATEST_DMG"
end
if test -f "$APP_TMP_DMG"
    echo \n(set_color red)"Deleting $APP_TMP_DMG"(set_color normal)
    rm "$APP_TMP_DMG"
end
if test -d /Volumes/Lunar
    echo \n(set_color red)"Unmounting /Volumes/Lunar"(set_color normal)
    hdiutil detach /Volumes/Lunar
end

create-dmg --identity="$EXPANDED_CODE_SIGN_IDENTITY_NAME" "$APP_TMP" "$TMP_DMG_DIR"
cp "$APP_TMP_DMG" "$APP_DMG"

# notarize "$APP_DMG" "$APP_DMG" "install"

echo \n(set_color yellow)"Generating AppCast"(set_color normal)
"$WORK_DIR/bin/generate_appcast" -f "$PRIV_KEY" "$RELEASE_DIR"

cp "$APP_DMG" "$APP_LATEST_DMG"

echo \n(set_color yellow)"Fixing appcast"(set_color normal)
"$WORK_DIR/update_appcast.py" "$PRIV_KEY" (cat "$ED_PRIV_KEY")
subl "$APPCAST"